{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"awtrix_light_client","text":""},{"location":"#install","title":"Install","text":"<pre><code>pip install awtrix_light_client\n</code></pre>"},{"location":"#usage-example","title":"Usage example","text":"<p>Official project documentation : https://blueforcer.github.io/awtrix-light/#/api</p> <p>Available environment variables <pre><code>AWTRIX_HTTP_CLIENT_AWTRIX=\"&lt;AWTRIX CONFIG&gt;\"\n</code></pre></p> <p><code>&lt;AWTRIX CONFIG&gt;</code> is in JSON and looks like this : <pre><code>{\n    \"base_url\": \"http://192.168.0.1\",\n    \"username\": \"admin\",\n    \"password\": \"password\",\n    \"verify_ssl\": false\n}\n</code></pre> <code>verify_ssl</code> used to verify https config (if accessing behind an HTTPS reverse proxy), can be <code>true</code>, <code>false</code>, or can point to a local ca bundle PEM encoded to validate local CA</p> <p>Environment variables can also be placed in a <code>.env</code> in the working directory.</p> <pre><code>import asyncio\n\nfrom awtrix_light_client.http_client import get_awtrix_http_client, AwtrixLightHttpClientError\n\n\nasync def main():\n    try:\n        async with get_awtrix_http_client() as client:\n            stats = await client.get_stats()\n            print(stats)\n    except AwtrixLightHttpClientError as e:\n        print(f\"HTTP code: {e.status_code}, error content: {e.content}\")\n\n\nasyncio.run(main())\n</code></pre>"},{"location":"api/client/","title":"Client","text":""},{"location":"api/client/#awtrix_light_client.http_client.get_awtrix_http_client","title":"awtrix_light_client.http_client.get_awtrix_http_client  <code>async</code>","text":"<pre><code>get_awtrix_http_client()\n</code></pre> <p>Gives access to an instance of the Awtrix-light HTTP client</p> <p>Returns:</p> Type Description <code>AsyncIterator[AwtrixLightHttpClient]</code> <p>An <code>asynccontextmanager</code> of <code>AwtrixLightHttpClient</code></p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>@asynccontextmanager\nasync def get_awtrix_http_client() -&gt; AsyncIterator[AwtrixLightHttpClient]:\n    \"\"\"Gives access to an instance of the Awtrix-light HTTP client\n\n    :return: An `asynccontextmanager` of `AwtrixLightHttpClient`\n    \"\"\"\n    settings = AwtrixLightHttpClientSettings()\n\n    auth = None\n    if settings.awtrix.username and settings.awtrix.password:\n        auth = (\n            settings.awtrix.username,\n            settings.awtrix.password,\n        )\n\n    async with AsyncClient(\n        base_url=f\"{settings.awtrix.base_url}api\",\n        auth=auth,\n        verify=settings.awtrix.verify_ssl,\n    ) as client:\n        yield AwtrixLightHttpClient(client)\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient","title":"awtrix_light_client.http_client.AwtrixLightHttpClient","text":"<pre><code>AwtrixLightHttpClient(client)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AsyncClient</code> <p><code>AsyncClient</code></p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>def __init__(self, client: AsyncClient) -&gt; None:\n    \"\"\"\n    :param client: `AsyncClient`\n    \"\"\"\n    self._client = client\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.get_stats","title":"get_stats  <code>async</code>","text":"<pre><code>get_stats()\n</code></pre> <p>General device stats (e.g., battery, RAM)</p> <p>Returns:</p> Type Description <code>Stats</code> <p>Return a <code>Stats</code> object</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def get_stats(self) -&gt; Stats:\n    \"\"\"\n    General device stats (e.g., battery, RAM)\n    :return: Return a `Stats` object\n    \"\"\"\n    response = (await self._make_request(\"GET\", \"stats\")).json()\n\n    return Stats(**response)\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.get_effects","title":"get_effects  <code>async</code>","text":"<pre><code>get_effects()\n</code></pre> <p>List of all effects</p> <p>Returns:</p> Type Description <code>List[EffectType]</code> <p>Return a list of <code>EffectType</code> object</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def get_effects(self) -&gt; List[EffectType]:\n    \"\"\"\n    List of all effects\n    :return: Return a list of `EffectType` object\n    \"\"\"\n    response = (await self._make_request(\"GET\", \"effects\")).json()\n\n    return [EffectType(e) for e in response]\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.get_transitions","title":"get_transitions  <code>async</code>","text":"<pre><code>get_transitions()\n</code></pre> <p>List of all transition effects</p> <p>Returns:</p> Type Description <code>List[TransitionType]</code> <p>Return a list of <code>TransitionType</code> object</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def get_transitions(self) -&gt; List[TransitionType]:\n    \"\"\"\n    List of all transition effects\n    :return: Return a list of `TransitionType` object\n    \"\"\"\n    response = (await self._make_request(\"GET\", \"transitions\")).json()\n\n    return [(TransitionType[t.upper()]) for t in response]\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.get_loops","title":"get_loops  <code>async</code>","text":"<pre><code>get_loops()\n</code></pre> <p>List of all apps in the loop</p> <p>Returns:</p> Type Description <code>Loop</code> <p>Return a <code>Loop</code> object</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def get_loops(self) -&gt; Loop:\n    \"\"\"\n    List of all apps in the loop\n    :return: Return a `Loop` object\n    \"\"\"\n    response = (await self._make_request(\"GET\", \"loop\")).json()\n\n    sorted_apps = dict(sorted(response.items(), key=lambda item: item[1]))\n\n    return Loop(loops=[app for app in sorted_apps.keys()])\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.get_screen","title":"get_screen  <code>async</code>","text":"<pre><code>get_screen()\n</code></pre> <p>Retrieve the current matrix screen as an array of 24 bit colors</p> <p>Returns:</p> Type Description <code>Screen</code> <p>Return a <code>Screen</code> object</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def get_screen(self) -&gt; Screen:\n    \"\"\"\n    Retrieve the current matrix screen as an array of 24 bit colors\n    :return: Return a `Screen` object\n    \"\"\"\n    response = (await self._make_request(\"GET\", \"screen\")).json()\n\n    return Screen(matrix=response)\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.set_power","title":"set_power  <code>async</code>","text":"<pre><code>set_power(power)\n</code></pre> <p>Toggle the matrix on or off</p> <p>Parameters:</p> Name Type Description Default <code>power</code> <code>bool</code> <p>Toggle the matrix</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def set_power(self, power: bool) -&gt; None:\n    \"\"\"\n    Toggle the matrix on or off\n    :param power: Toggle the matrix\n    \"\"\"\n    await self._make_request(\"POST\", \"power\", data={\"power\": power})\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.set_sleep","title":"set_sleep  <code>async</code>","text":"<pre><code>set_sleep(seconds)\n</code></pre> <p>Send the board in deep sleep mode (turns off the matrix as well), good for saving battery life</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>int</code> <p>Duration of sleep mode</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def set_sleep(self, seconds: int) -&gt; None:\n    \"\"\"\n    Send the board in deep sleep mode (turns off the matrix as well), good for saving battery life\n    :param seconds: Duration of sleep mode\n    \"\"\"\n    await self._make_request(\"POST\", \"sleep\", data={\"sleep\": seconds})\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.set_sound","title":"set_sound  <code>async</code>","text":"<pre><code>set_sound(sound)\n</code></pre> <p>Play a RTTTL sound from the MELODIES folder</p> <p>Parameters:</p> Name Type Description Default <code>sound</code> <code>str</code> <p>Sound to play</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def set_sound(self, sound: str) -&gt; None:\n    \"\"\"\n    Play a RTTTL sound from the MELODIES folder\n    :param sound: Sound to play\n    \"\"\"\n    await self._make_request(\"POST\", \"sound\", data={\"sound\": sound})\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.set_rtttl","title":"set_rtttl  <code>async</code>","text":"<pre><code>set_rtttl(rtttl)\n</code></pre> <p>Play a RTTTL sound from a given RTTTL string</p> <p>Parameters:</p> Name Type Description Default <code>sound</code> <p>Sound to play in RTTTL format</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def set_rtttl(self, rtttl: str) -&gt; None:\n    \"\"\"\n    Play a RTTTL sound from a given RTTTL string\n    :param sound: Sound to play in RTTTL format\n    \"\"\"\n    await self._make_request(\"POST\", \"rtttl\", data={\"rtttl\": rtttl})\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.set_moodlight","title":"set_moodlight  <code>async</code>","text":"<pre><code>set_moodlight(moodlight)\n</code></pre> <p>Set the entire matrix to a custom color or temperature</p> <p>Parameters:</p> Name Type Description Default <code>moodlight</code> <code>Moodlight</code> <p>Custom color or temperature to set. To disable moodlight pass an empty object <code>Moodlight()</code></p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def set_moodlight(self, moodlight: Moodlight) -&gt; None:\n    \"\"\"\n    Set the entire matrix to a custom color or temperature\n    :param moodlight: Custom color or temperature to set. To disable moodlight pass an empty object `Moodlight()`\n    \"\"\"\n    await self._make_request(\n        \"POST\", \"moodlight\", data=moodlight.model_dump(exclude_none=True)\n    )\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.set_indicator","title":"set_indicator  <code>async</code>","text":"<pre><code>set_indicator(indicator, color, blink=None, fade=None)\n</code></pre> <p>Colored indicators serve as small notification signs displayed on specific areas of the screen:</p> <p>Parameters:</p> Name Type Description Default <code>indicator</code> <code>Literal[1, 2, 3]</code> <p>Indicator (Upper right corner = 1, Right side = 2, Lower right corner = 3)</p> required <code>color</code> <code>Color</code> <p>Color to display. To hide the indicators pass black as Color</p> required <code>blink</code> <code>int</code> <p>Blink timer in milliseconds</p> <code>None</code> <code>fade</code> <code>int</code> <p>Fade timer in milliseconds</p> <code>None</code> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def set_indicator(\n    self,\n    indicator: Literal[1, 2, 3],\n    color: Color,\n    blink: int = None,\n    fade: int = None,\n) -&gt; None:\n    \"\"\"\n    Colored indicators serve as small notification signs displayed on specific areas of the screen:\n    :param indicator: Indicator (Upper right corner = 1, Right side = 2, Lower right corner = 3)\n    :param color: Color to display. To hide the indicators pass black as Color\n    :param blink: Blink timer in milliseconds\n    :param fade: Fade timer in milliseconds\n    \"\"\"\n    if blink and fade:\n        raise ValueError(\"fade and blink can't be set together\")\n\n    data = {\"color\": color.as_hex(format=\"long\").upper()}\n\n    if blink:\n        data[\"blink\"] = blink\n\n    if fade:\n        data[\"fade\"] = fade\n\n    await self._make_request(\n        \"POST\",\n        f\"indicator{indicator}\",\n        data=data,\n    )\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.set_custom_application","title":"set_custom_application  <code>async</code>","text":"<pre><code>set_custom_application(name, custom_application)\n</code></pre> <p>Set custom app or a list of custom app When erasing apps, AWTRIX doesn't match the exact app name. Instead, it identifies apps that begin with the specified name. To expunge all associated apps, send application=None. For example for name=test. This action will remove test0, test1, and so on. To eradicate a single app, direct the command to, for instance, test1</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the application to manage</p> required <code>custom_application</code> <code>Union[CustomApplication, List[CustomApplication], None]</code> <p>An application, a list of application to setup or None</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def set_custom_application(\n    self,\n    name: str,\n    custom_application: Union[CustomApplication, List[CustomApplication], None],\n) -&gt; None:\n    \"\"\"\n    Set custom app or a list of custom app\n    When erasing apps, AWTRIX doesn't match the exact app name. Instead, it identifies apps that begin with the specified name.\n    To expunge all associated apps, send application=None. For example for name=test. This action will remove test0, test1, and so on.\n    To eradicate a single app, direct the command to, for instance, test1\n    :param name: Name of the application to manage\n    :param custom_application: An application, a list of application to setup or None\n    \"\"\"\n    if isinstance(custom_application, CustomApplication):\n        data = custom_application.model_dump(exclude_none=True)\n    else:\n        data = [app.model_dump(exclude_none=True) for app in custom_application]\n\n    await self._make_request(\"POST\", \"custom\", params={\"name\": name}, data=data)\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.notify","title":"notify  <code>async</code>","text":"<pre><code>notify(notification)\n</code></pre> <p>One-Time Notification</p> <p>Parameters:</p> Name Type Description Default <code>notification</code> <code>Notification</code> <p>Notification to display</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def notify(self, notification: Notification) -&gt; None:\n    \"\"\"\n    One-Time Notification\n    :param notification: Notification to display\n    \"\"\"\n    await self._make_request(\n        \"POST\", \"notify\", data=notification.model_dump(exclude_none=True)\n    )\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.dismiss_notification","title":"dismiss_notification  <code>async</code>","text":"<pre><code>dismiss_notification()\n</code></pre> <p>Easily dismiss a notification that was configured with \"hold\": true</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def dismiss_notification(self) -&gt; None:\n    \"\"\"\n    Easily dismiss a notification that was configured with \"hold\": true\n    \"\"\"\n    await self._make_request(\"POST\", \"notify/dismiss\")\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.next_app","title":"next_app  <code>async</code>","text":"<pre><code>next_app()\n</code></pre> <p>Navigate to the next app</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def next_app(self) -&gt; None:\n    \"\"\"\n    Navigate to the next app\n    \"\"\"\n    await self._make_request(\"POST\", \"nextapp\")\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.previous_app","title":"previous_app  <code>async</code>","text":"<pre><code>previous_app()\n</code></pre> <p>Navigate to the previous app</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def previous_app(self) -&gt; None:\n    \"\"\"\n    Navigate to the previous app\n    \"\"\"\n    await self._make_request(\"POST\", \"previousapp\")\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.switch_app","title":"switch_app  <code>async</code>","text":"<pre><code>switch_app(name)\n</code></pre> <p>Directly transition to a desired app using its name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Application to switch to</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def switch_app(self, name: str) -&gt; None:\n    \"\"\"\n    Directly transition to a desired app using its name\n    :param name: Application to switch to\n    \"\"\"\n    await self._make_request(\"POST\", \"switch\", data={\"name\": name})\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.get_settings","title":"get_settings  <code>async</code>","text":"<pre><code>get_settings()\n</code></pre> <p>You can initiate the firmware update either through the update button in HA or using the following</p> <p>Returns:</p> Type Description <code>Settings</code> <p>Return a <code>Settings</code> object</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def get_settings(self) -&gt; Settings:\n    \"\"\"\n    You can initiate the firmware update either through the update button in HA or using the following\n    :return: Return a `Settings` object\n    \"\"\"\n    return Settings(**(await self._make_request(\"GET\", \"settings\")).json())\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.set_settings","title":"set_settings  <code>async</code>","text":"<pre><code>set_settings(s)\n</code></pre> <p>Adjust various settings related to the app display.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Settings</code> <p>Settings to update</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def set_settings(self, s: Settings) -&gt; None:\n    \"\"\"\n    Adjust various settings related to the app display.\n    :param s: Settings to update\n    \"\"\"\n    await self._make_request(\n        \"POST\", \"settings\", data=s.model_dump(exclude_none=True)\n    )\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.update","title":"update  <code>async</code>","text":"<pre><code>update()\n</code></pre> <p>You can initiate the firmware update either through the update button in HA or using the following</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def update(self) -&gt; None:\n    \"\"\"\n    You can initiate the firmware update either through the update button in HA or using the following\n    \"\"\"\n    await self._make_request(\"POST\", \"doupdate\")\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.reboot","title":"reboot  <code>async</code>","text":"<pre><code>reboot()\n</code></pre> <p>If you need to restart the Awtrix</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def reboot(self) -&gt; None:\n    \"\"\"\n    If you need to restart the Awtrix\n    \"\"\"\n    await self._make_request(\"POST\", \"reboot\")\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.erase","title":"erase  <code>async</code>","text":"<pre><code>erase()\n</code></pre> <p>WARNING: This action will format the flash memory and EEPROM but will not modify the WiFi Settings. It essentially serves as a factory reset.</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def erase(self) -&gt; None:\n    \"\"\"\n    WARNING: This action will format the flash memory and EEPROM but will not modify the WiFi Settings. It essentially serves as a factory reset.\n    \"\"\"\n    await self._make_request(\"POST\", \"erase\")\n</code></pre>"},{"location":"api/client/#awtrix_light_client.http_client.AwtrixLightHttpClient.reset_settings","title":"reset_settings  <code>async</code>","text":"<pre><code>reset_settings()\n</code></pre> <p>WARNING: This action will reset all settings from the settings API. It does not reset the flash files and WiFi Settings.</p> Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>async def reset_settings(self) -&gt; None:\n    \"\"\"\n    WARNING: This action will reset all settings from the settings API. It does not reset the flash files and WiFi Settings.\n    \"\"\"\n    await self._make_request(\"POST\", \"resetSettings\")\n</code></pre>"},{"location":"api/exceptions/","title":"Exceptions","text":""},{"location":"api/exceptions/#awtrix_light_client.http_client.AwtrixLightHttpClientError","title":"awtrix_light_client.http_client.AwtrixLightHttpClientError","text":"<pre><code>AwtrixLightHttpClientError(status_code, content, *args)\n</code></pre> <p>               Bases: <code>BaseException</code></p> <p>Class of API exception</p> <p>Parameters:</p> Name Type Description Default <code>status_code</code> <code>int</code> <p>HTTP status code of the response</p> required <code>content</code> <code>str</code> <p>HTTP content of the response</p> required Source code in <code>awtrix_light_client/http_client.py</code> <pre><code>def __init__(self, status_code: int, content: str, *args: object) -&gt; None:\n    super().__init__(*args)\n    self.status_code = status_code\n    self.content = content\n</code></pre>"},{"location":"api/settings/","title":"Settings","text":""},{"location":"api/settings/#awtrix_light_client.http_settings.AwtrixHttpConfig","title":"awtrix_light_client.http_settings.AwtrixHttpConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model representing API configuration</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <p>Base URL of API</p> required <code>username</code> <p>username when using HTTP basic auth</p> required <code>password</code> <p>password when using HTTP basic auth</p> required <code>verify</code> <p>SSL certificates (a.k.a CA bundle) used to verify the identity of requested hosts. Either True (default CA bundle), a path to an SSL certificate file, or False (which will disable verification).</p> required"},{"location":"api/models/application/","title":"Application","text":""},{"location":"api/models/application/#awtrix_light_client.models.application.TextCase","title":"awtrix_light_client.models.application.TextCase","text":"<p>               Bases: <code>IntEnum</code></p>"},{"location":"api/models/application/#awtrix_light_client.models.application.TextCase.GLOBAL","title":"GLOBAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GLOBAL = 0\n</code></pre>"},{"location":"api/models/application/#awtrix_light_client.models.application.TextCase.FORCE_UPPERCASE","title":"FORCE_UPPERCASE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FORCE_UPPERCASE = 1\n</code></pre>"},{"location":"api/models/application/#awtrix_light_client.models.application.TextCase.SHOW_AS_IT_SEND","title":"SHOW_AS_IT_SEND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SHOW_AS_IT_SEND = 2\n</code></pre>"},{"location":"api/models/application/#awtrix_light_client.models.application.PushIcon","title":"awtrix_light_client.models.application.PushIcon","text":"<p>               Bases: <code>IntEnum</code></p>"},{"location":"api/models/application/#awtrix_light_client.models.application.PushIcon.NOT_MOVING","title":"NOT_MOVING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NOT_MOVING = 0\n</code></pre>"},{"location":"api/models/application/#awtrix_light_client.models.application.PushIcon.MOVING_ONE_TIME","title":"MOVING_ONE_TIME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MOVING_ONE_TIME = 1\n</code></pre>"},{"location":"api/models/application/#awtrix_light_client.models.application.PushIcon.MOVING","title":"MOVING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MOVING = 2\n</code></pre>"},{"location":"api/models/application/#awtrix_light_client.models.application.Dp","title":"awtrix_light_client.models.application.Dp","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draw a pixel</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>Pixel x axis</p> required <code>y</code> <p>Pixel y axis</p> required <code>cl</code> <p>Pixel color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Dl","title":"awtrix_light_client.models.application.Dl","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draw a line</p> <p>Parameters:</p> Name Type Description Default <code>x0</code> <p>Start pixel x axis</p> required <code>y0</code> <p>Start pixel y axis</p> required <code>x1</code> <p>End pixel x axis</p> required <code>y1</code> <p>End pixel y axis</p> required <code>cl</code> <p>Line color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Dr","title":"awtrix_light_client.models.application.Dr","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draw a rectangle</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>Top left corner pixel x axis</p> required <code>y</code> <p>Top left corner pixel y axis</p> required <code>w</code> <p>Width</p> required <code>h</code> <p>High</p> required <code>cl</code> <p>Line color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Df","title":"awtrix_light_client.models.application.Df","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draw a filled rectangle</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>Top left corner pixel x axis</p> required <code>y</code> <p>Top left corner pixel y axis</p> required <code>w</code> <p>Width</p> required <code>h</code> <p>High</p> required <code>cl</code> <p>Line color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Dc","title":"awtrix_light_client.models.application.Dc","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draw a circle</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>Circle center x axis</p> required <code>y</code> <p>Circle center y axis</p> required <code>r</code> <p>Radius</p> required <code>cl</code> <p>Line color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Dfc","title":"awtrix_light_client.models.application.Dfc","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draw a filled circle</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>Circle center x axis</p> required <code>y</code> <p>Circle center y axis</p> required <code>r</code> <p>Radius</p> required <code>cl</code> <p>Line color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Dt","title":"awtrix_light_client.models.application.Dt","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draw text</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>Text top left corner pixel x axis</p> required <code>y</code> <p>Text top left corner pixel y axis</p> required <code>t</code> <p>Text</p> required <code>cl</code> <p>Line color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Dt","title":"awtrix_light_client.models.application.Dt","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draw text</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>Text top left corner pixel x axis</p> required <code>y</code> <p>Text top left corner pixel y axis</p> required <code>t</code> <p>Text</p> required <code>cl</code> <p>Line color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Db","title":"awtrix_light_client.models.application.Db","text":"<p>               Bases: <code>BaseModel</code></p> <p>Draws a RGB888 bitmap array</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <p>Top left corner pixel x axis</p> required <code>y</code> <p>Top left corner pixel y axis</p> required <code>w</code> <p>Width</p> required <code>h</code> <p>High</p> required <code>bmp</code> <p>Bitmap array</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.LifeTimeMode","title":"awtrix_light_client.models.application.LifeTimeMode","text":"<p>               Bases: <code>IntEnum</code></p>"},{"location":"api/models/application/#awtrix_light_client.models.application.LifeTimeMode.DELETE","title":"DELETE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DELETE = 0\n</code></pre>"},{"location":"api/models/application/#awtrix_light_client.models.application.LifeTimeMode.STALE","title":"STALE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STALE = 1\n</code></pre>"},{"location":"api/models/application/#awtrix_light_client.models.application.Fragment","title":"awtrix_light_client.models.application.Fragment","text":"<p>               Bases: <code>BaseModel</code></p> <p>A fragment of text</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <p>Text</p> required <code>c</code> <p>Color</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.BaseApplication","title":"awtrix_light_client.models.application.BaseApplication","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base application class</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <p>The text to display. Keep in mind the font does not have a fixed size and I uses less space than W. This facts affects when text will start scrolling</p> required <code>textCase</code> <p>Changes the Uppercase setting.</p> required <code>topText</code> <p>Draw the text on top.</p> required <code>textOffset</code> <p>Sets an offset for the x position of a starting text.</p> required <code>center</code> <p>Centers a short, non-scrollable text.</p> required <code>color</code> <p>The text, bar or line color.</p> required <code>gradient</code> <p>Colorizes the text in a gradient of two given colors.</p> required <code>blinkText</code> <p>Blinks the text in an given interval, not compatible with gradient or rainbow.</p> required <code>fadeText</code> <p>Fades the text on and off in an given interval, not compatible with gradient or rainbow.</p> required <code>background</code> <p>Sets a background color.</p> required <code>rainbow</code> <p>Fades each letter in the text differently through the entire RGB spectrum.</p> required <code>icon</code> <p>The icon ID or filename (without extension) to display on the app. You can also send a 8x8 jpg as Base64 String</p> required <code>pushIcon</code> <p>Icon movement.</p> required <code>repeat</code> <p>Sets how many times the text should be scrolled through the matrix before the app ends.</p> required <code>duration</code> <p>Sets how long the app or notification should be displayed.</p> required <code>bar</code> <p>Draws a bargraph. Without icon maximum 16 values, with icon 11 values.</p> required <code>line</code> <p>Draws a linechart. Without icon maximum 16 values, with icon 11 values.</p> required <code>autoscale</code> <p>Enables or disables autoscaling for bar and linechart.</p> required <code>progress</code> <p>Shows a progress bar. Value can be 0-100.</p> required <code>progressC</code> <p>The color of the progress bar.</p> required <code>progressBC</code> <p>The color of the progress bar background.</p> required <code>draw</code> <p>Array of drawing instructions. Each object represents a drawing command. See the drawing instructions below.</p> required <code>noScroll</code> <p>Disables the text scrolling.</p> required <code>scrollSpeed</code> <p>Modifies the scroll speed. Enter a percentage value of the original scroll speed.</p> required <code>effect</code> <p>Shows an effect as background.The effect can be removed by sending an empty string for effect.</p> required <code>effectSettings</code> <p>Changes color and speed of the effect.</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.CustomApplication","title":"awtrix_light_client.models.application.CustomApplication","text":"<p>               Bases: <code>BaseApplication</code></p> <p>Custom application</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <p>Defines the position of your custom page in the loop, starting at 0 for the first position. This will only apply with your first push. This function is experimental.</p> required <code>lifetime</code> <p>Removes the custom app when there is no update after the given time in seconds.</p> required <code>lifetimeMode</code> <p>0 = deletes the app, 1 = marks it as staled with a red rectangle around the app</p> required <code>save</code> <p>Saves your custom app into flash and reloads it after boot. Avoid this for custom apps with high update frequencies because the ESP's flash memory has limited write cycles.</p> required"},{"location":"api/models/application/#awtrix_light_client.models.application.Notification","title":"awtrix_light_client.models.application.Notification","text":"<p>               Bases: <code>BaseApplication</code></p> <p>Notification</p> <p>Parameters:</p> Name Type Description Default <code>hold</code> <p>Set it to true, to hold your notification on top until you press the middle button or dismiss it via HomeAssistant. This key only belongs to notification.</p> required <code>sound</code> <p>The filename of your RTTTL ringtone file placed in the MELODIES folder (without extension).</p> required <code>rtttl</code> <p>Allows to send the RTTTL sound string with the json.</p> required <code>loopSound</code> <p>Loops the sound or rtttl as long as the notification is running.</p> required <code>stack</code> <p>Defines if the notification will be stacked. false will immediately replace the current notification.</p> required <code>wakeup</code> <p>If the Matrix is off, the notification will wake it up for the time of the notification.</p> required <code>clients</code> <p>Allows forwarding a notification to other awtrix devices. Use the MQTT prefix for MQTT and IP addresses for HTTP.</p> required"},{"location":"api/models/effect/","title":"Effect","text":""},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette","title":"awtrix_light_client.models.effect.Palette","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette.CLOUD","title":"CLOUD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLOUD = 'Cloud'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette.LAVA","title":"LAVA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LAVA = 'Lava'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette.OCEAN","title":"OCEAN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OCEAN = 'Ocean'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette.FOREST","title":"FOREST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FOREST = 'Forest'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette.STRIPE","title":"STRIPE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STRIPE = 'Stripe'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette.PARTY","title":"PARTY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARTY = 'Party'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette.HEAT","title":"HEAT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HEAT = 'Heat'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.Palette.RAINBOW","title":"RAINBOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RAINBOW = 'Rainbow'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType","title":"awtrix_light_client.models.effect.EffectType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.FADE","title":"FADE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FADE = 'Fade'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.MOVINGLINE","title":"MOVINGLINE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MOVINGLINE = 'MovingLine'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.BRICKBREAKER","title":"BRICKBREAKER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BRICKBREAKER = 'BrickBreaker'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.PINGPONG","title":"PINGPONG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PINGPONG = 'PingPong'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.RADAR","title":"RADAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RADAR = 'Radar'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.CHECKERBOARD","title":"CHECKERBOARD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHECKERBOARD = 'Checkerboard'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.FIREWORKS","title":"FIREWORKS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIREWORKS = 'Fireworks'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.PLASMACLOUD","title":"PLASMACLOUD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PLASMACLOUD = 'PlasmaCloud'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.RIPPLE","title":"RIPPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RIPPLE = 'Ripple'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.SNAKE","title":"SNAKE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SNAKE = 'Snake'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.PACIFICA","title":"PACIFICA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PACIFICA = 'Pacifica'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.THEATERCHASE","title":"THEATERCHASE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>THEATERCHASE = 'TheaterChase'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.PLASMA","title":"PLASMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PLASMA = 'Plasma'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.MATRIX","title":"MATRIX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATRIX = 'Matrix'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.SWIRLIN","title":"SWIRLIN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SWIRLIN = 'SwirlIn'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.SWIRLOUT","title":"SWIRLOUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SWIRLOUT = 'SwirlOut'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.LOOKINGEYES","title":"LOOKINGEYES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOOKINGEYES = 'LookingEyes'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.TWINKLINGSTARS","title":"TWINKLINGSTARS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TWINKLINGSTARS = 'TwinklingStars'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectType.COLORWAVES","title":"COLORWAVES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COLORWAVES = 'ColorWaves'\n</code></pre>"},{"location":"api/models/effect/#awtrix_light_client.models.effect.EffectSetting","title":"awtrix_light_client.models.effect.EffectSetting","text":"<p>               Bases: <code>BaseModel</code></p> <p>EffectSetting</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <p>Mostly 3 as standard. Higher means faster.</p> required <code>palette</code> <p>A color palette is an array of 16 colors to create transitions between colors.</p> required <code>blend</code> <p>Interpolates between colors, creating a broad array of in-between hues for smooth color transitions.</p> required"},{"location":"api/models/loop/","title":"Loop","text":""},{"location":"api/models/loop/#awtrix_light_client.models.loop.Loop","title":"awtrix_light_client.models.loop.Loop","text":"<p>               Bases: <code>BaseModel</code></p> <p>Loop</p> <p>Parameters:</p> Name Type Description Default <code>loops</code> <p>List of all apps in the loop</p> required"},{"location":"api/models/moodlight/","title":"Moodlight","text":""},{"location":"api/models/moodlight/#awtrix_light_client.models.moodlight.Moodlight","title":"awtrix_light_client.models.moodlight.Moodlight","text":"<p>               Bases: <code>BaseModel</code></p> <p>Moodlight</p> <p>Parameters:</p> Name Type Description Default <code>brightness</code> <p>matrix custom brightness</p> required <code>kelvin</code> <p>matrix custom temperature</p> required <code>color</code> <p>matrix custom color</p> required"},{"location":"api/models/screen/","title":"Screen","text":""},{"location":"api/models/screen/#awtrix_light_client.models.screen.Screen","title":"awtrix_light_client.models.screen.Screen","text":"<p>               Bases: <code>BaseModel</code></p> <p>Screen</p> <p>Parameters:</p> Name Type Description Default <code>matrix</code> <p>matrix screen as an array of 24bit colors</p> required"},{"location":"api/models/setting/","title":"Setting","text":""},{"location":"api/models/setting/#awtrix_light_client.models.setting.Settings","title":"awtrix_light_client.models.setting.Settings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Settings</p> <p>Parameters:</p> Name Type Description Default <code>ATIME</code> <p>Duration an app is displayed in seconds.</p> required <code>TEFF</code> <p>Choose between app transition effects.</p> required <code>TSPEED</code> <p>Time taken for the transition to the next app in milliseconds.</p> required <code>TCOL</code> <p>Global text color.</p> required <code>TMODE</code> <p>Changes the time app style.</p> required <code>CHCOL</code> <p>Calendar header color of the time app.</p> required <code>CBCOL</code> <p>Calendar body color of the time app.</p> required <code>CTCOL</code> <p>Calendar text color in the time app.</p> required <code>WD</code> <p>Enable or disable the weekday display.</p> required <code>WDCA</code> <p>Active weekday color.</p> required <code>WDCI</code> <p>Inactive weekday color.</p> required <code>BRI</code> <p>Matrix brightness.</p> required <code>ABRI</code> <p>Automatic brightness control.</p> required <code>ATRANS</code> <p>Automatic switching to the next app.</p> required <code>CCORRECTION</code> <p>Color correction for the matrix.</p> required <code>CTEMP</code> <p>Color temperature for the matrix.</p> required <code>TFORMAT</code> <p>Time format for the TimeApp.</p> required <code>DFORMAT</code> <p>Date format for the DateApp.</p> required <code>SOM</code> <p>Start the week on Monday.</p> required <code>BLOCKN</code> <p>Block physical navigation keys (still sends input to MQTT).</p> required <code>UPPERCASE</code> <p>Display text in uppercase.</p> required <code>TIME_COL</code> <p>Text color of the time app. Use 0 for global text color.</p> required <code>DATE_COL</code> <p>Text color of the date app. Use 0 for global text color.</p> required <code>TEMP_COL</code> <p>Text color of the temperature app. Use 0 for global text color.</p> required <code>HUM_COL</code> <p>Text color of the humidity app. Use 0 for global text color.</p> required <code>BAT_COL</code> <p>Text color of the battery app. Use 0 for global text color.</p> required <code>SSPEED</code> <p>Scroll speed modification.</p> required <code>TIM</code> <p>Enable or disable the native time app (requires reboot).</p> required <code>DAT</code> <p>Enable or disable the native date app (requires reboot).</p> required <code>HUM</code> <p>Enable or disable the native humidity app (requires reboot).</p> required <code>TEMP</code> <p>Enable or disable the native temperature app (requires reboot).</p> required <code>BAT</code> <p>Enable or disable the native battery app (requires reboot).</p> required <code>MATP</code> <p>Enable or disable the matrix. Similar to <code>power</code> Endpoint but without the animation.</p> required <code>VOL</code> <p>Allows to set the Volume of the DFplayer (Only for old AWTRIX2.0 upgrades)</p> required"},{"location":"api/models/stat/","title":"Stat","text":""},{"location":"api/models/stat/#awtrix_light_client.models.stat.Stats","title":"awtrix_light_client.models.stat.Stats","text":"<p>               Bases: <code>BaseModel</code></p> <p>Statistics</p> <p>Parameters:</p> Name Type Description Default <code>bat</code> <p>description</p> required"},{"location":"api/models/transition/","title":"Transition","text":""},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType","title":"awtrix_light_client.models.transition.TransitionType","text":"<p>               Bases: <code>IntEnum</code></p> <p>Transitions</p>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.RANDOM","title":"RANDOM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RANDOM = 0\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.SLIDE","title":"SLIDE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SLIDE = 1\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.DIM","title":"DIM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DIM = 2\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.ZOOM","title":"ZOOM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ZOOM = 3\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.ROTATE","title":"ROTATE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ROTATE = 4\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.PIXELATE","title":"PIXELATE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PIXELATE = 5\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.CURTAIN","title":"CURTAIN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CURTAIN = 6\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.RIPPLE","title":"RIPPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RIPPLE = 7\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.BLINK","title":"BLINK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLINK = 8\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.RELOAD","title":"RELOAD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELOAD = 9\n</code></pre>"},{"location":"api/models/transition/#awtrix_light_client.models.transition.TransitionType.FADE","title":"FADE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FADE = 10\n</code></pre>"},{"location":"api/models/utils/","title":"Utils","text":""},{"location":"api/models/utils/#awtrix_light_client.models.utils.convert_color_to_hex","title":"awtrix_light_client.models.utils.convert_color_to_hex","text":"<pre><code>convert_color_to_hex(color)\n</code></pre> <p>Helper function to convert a color in hex format</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Color</code> <p>color to convert</p> required <p>Returns:</p> Type Description <code>str</code> <p>color in hex format</p> Source code in <code>awtrix_light_client/models/utils.py</code> <pre><code>def convert_color_to_hex(color: Color) -&gt; str:\n    \"\"\"Helper function to convert a color in hex format\n\n    :param color: color to convert\n    :return: color in hex format\n    \"\"\"\n    return color.as_hex(format=\"long\").upper()\n</code></pre>"}]}